// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/djurica-surla/backend-homework/internal/service (interfaces: QuestionOptionStorer)

// Package questionOptionStorerMock is a generated GoMock package.
package questionOptionStorerMock

import (
	context "context"
	reflect "reflect"

	entity "github.com/djurica-surla/backend-homework/internal/entity"
	service "github.com/djurica-surla/backend-homework/internal/service"
	gomock "github.com/golang/mock/gomock"
)

// MockQuestionOptionStorer is a mock of QuestionOptionStorer interface.
type MockQuestionOptionStorer struct {
	ctrl     *gomock.Controller
	recorder *MockQuestionOptionStorerMockRecorder
}

// MockQuestionOptionStorerMockRecorder is the mock recorder for MockQuestionOptionStorer.
type MockQuestionOptionStorerMockRecorder struct {
	mock *MockQuestionOptionStorer
}

// NewMockQuestionOptionStorer creates a new mock instance.
func NewMockQuestionOptionStorer(ctrl *gomock.Controller) *MockQuestionOptionStorer {
	mock := &MockQuestionOptionStorer{ctrl: ctrl}
	mock.recorder = &MockQuestionOptionStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuestionOptionStorer) EXPECT() *MockQuestionOptionStorerMockRecorder {
	return m.recorder
}

// CreateQuestionOption mocks base method.
func (m *MockQuestionOptionStorer) CreateQuestionOption(arg0 context.Context, arg1 int, arg2 service.QuestionOptionCreationDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuestionOption", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateQuestionOption indicates an expected call of CreateQuestionOption.
func (mr *MockQuestionOptionStorerMockRecorder) CreateQuestionOption(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuestionOption", reflect.TypeOf((*MockQuestionOptionStorer)(nil).CreateQuestionOption), arg0, arg1, arg2)
}

// DeleteQuestionOptions mocks base method.
func (m *MockQuestionOptionStorer) DeleteQuestionOptions(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQuestionOptions", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQuestionOptions indicates an expected call of DeleteQuestionOptions.
func (mr *MockQuestionOptionStorerMockRecorder) DeleteQuestionOptions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuestionOptions", reflect.TypeOf((*MockQuestionOptionStorer)(nil).DeleteQuestionOptions), arg0, arg1)
}

// GetQuestionOptions mocks base method.
func (m *MockQuestionOptionStorer) GetQuestionOptions(arg0 context.Context, arg1 int) ([]entity.QuestionOption, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestionOptions", arg0, arg1)
	ret0, _ := ret[0].([]entity.QuestionOption)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestionOptions indicates an expected call of GetQuestionOptions.
func (mr *MockQuestionOptionStorerMockRecorder) GetQuestionOptions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestionOptions", reflect.TypeOf((*MockQuestionOptionStorer)(nil).GetQuestionOptions), arg0, arg1)
}
