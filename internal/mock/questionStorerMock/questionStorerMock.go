// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/djurica-surla/backend-homework/internal/service (interfaces: QuestionStorer)

// Package questionStorerMock is a generated GoMock package.
package questionStorerMock

import (
	context "context"
	reflect "reflect"

	entity "github.com/djurica-surla/backend-homework/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockQuestionStorer is a mock of QuestionStorer interface.
type MockQuestionStorer struct {
	ctrl     *gomock.Controller
	recorder *MockQuestionStorerMockRecorder
}

// MockQuestionStorerMockRecorder is the mock recorder for MockQuestionStorer.
type MockQuestionStorerMockRecorder struct {
	mock *MockQuestionStorer
}

// NewMockQuestionStorer creates a new mock instance.
func NewMockQuestionStorer(ctrl *gomock.Controller) *MockQuestionStorer {
	mock := &MockQuestionStorer{ctrl: ctrl}
	mock.recorder = &MockQuestionStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuestionStorer) EXPECT() *MockQuestionStorerMockRecorder {
	return m.recorder
}

// CreateQuestion mocks base method.
func (m *MockQuestionStorer) CreateQuestion(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuestion", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQuestion indicates an expected call of CreateQuestion.
func (mr *MockQuestionStorerMockRecorder) CreateQuestion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuestion", reflect.TypeOf((*MockQuestionStorer)(nil).CreateQuestion), arg0, arg1)
}

// DeleteQuestion mocks base method.
func (m *MockQuestionStorer) DeleteQuestion(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQuestion", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQuestion indicates an expected call of DeleteQuestion.
func (mr *MockQuestionStorerMockRecorder) DeleteQuestion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuestion", reflect.TypeOf((*MockQuestionStorer)(nil).DeleteQuestion), arg0, arg1)
}

// GetQuestionByID mocks base method.
func (m *MockQuestionStorer) GetQuestionByID(arg0 context.Context, arg1 int) (entity.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestionByID", arg0, arg1)
	ret0, _ := ret[0].(entity.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestionByID indicates an expected call of GetQuestionByID.
func (mr *MockQuestionStorerMockRecorder) GetQuestionByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestionByID", reflect.TypeOf((*MockQuestionStorer)(nil).GetQuestionByID), arg0, arg1)
}

// GetQuestions mocks base method.
func (m *MockQuestionStorer) GetQuestions(arg0 context.Context, arg1, arg2 int) ([]entity.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestions", arg0, arg1, arg2)
	ret0, _ := ret[0].([]entity.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestions indicates an expected call of GetQuestions.
func (mr *MockQuestionStorerMockRecorder) GetQuestions(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestions", reflect.TypeOf((*MockQuestionStorer)(nil).GetQuestions), arg0, arg1, arg2)
}

// UpdateQuestion mocks base method.
func (m *MockQuestionStorer) UpdateQuestion(arg0 context.Context, arg1 int, arg2 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuestion", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQuestion indicates an expected call of UpdateQuestion.
func (mr *MockQuestionStorerMockRecorder) UpdateQuestion(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuestion", reflect.TypeOf((*MockQuestionStorer)(nil).UpdateQuestion), arg0, arg1, arg2)
}
